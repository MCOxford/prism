dtmc

formula c1_connected_server_has_sth = (c1s=1 & s1_sth)|(c1s=2 & s2_sth);
formula c2_connected_server_has_sth = (c2s=1 & s1_sth)|(c2s=2 & s2_sth);
formula updated_client_gossips = (c1=1 & c1_sth & !c1_skip)|(c2=1 & c2_sth & !c2_skip);
formula nonupdated_client_gossips = (c1=1 & !c1_sth & !c1_skip)|(c2=1 & !c2_sth & !c2_skip);
formula s1_connected_client_has_sth = (c1s=1 & c1_sth)|(c2s=1 & c2_sth);
formula s2_connected_client_has_sth = (c1s=2 & c1_sth)|(c2s=2 & c2_sth);

formula abs_c_sth = 0 +
		((c1=2 & ((!c1_sth & c1_connected_server_has_sth) | c1_sth)) | (c1!=2 & c1_sth)?1:0) +
		((c2=2 & ((!c2_sth & c2_connected_server_has_sth) | c2_sth)) | (c2!=2 & c2_sth)?1:0);

formula abs_s1_sth = (((!s1_sth & s1_connected_client_has_sth)|s1_sth)?1:0) ;
formula abs_s2_sth = (((!s2_sth & s2_connected_client_has_sth)|s2_sth)?1:0) ;

formula abs_stage = 0 +
(serverg & c1!=1 & c2!=1?1:0) + 
((c1=1 | c2=1) & updated_client_gossips & !nonupdated_client_gossips?2:0) +
((c1=1 | c2=1) & (!updated_client_gossips & nonupdated_client_gossips)?3:0) +
((c1=1 | c2=1) & (updated_client_gossips & nonupdated_client_gossips)?4:0) +
((c1=1 | c2=1) & !updated_client_gossips & !nonupdated_client_gossips?5:0) +
(c1=2&c2=2?6:0) +
(c1=3&c2=3?7:0) +
(c1=4&c2=4?8:0);

formula abs_flag = (c1_flag?1:0)+(c2_flag?1:0);

label "abs_t" = abs_c_sth=2 & abs_stage>=7;

const bool c0_flag = true;

const bool c1_sth_init = true;
const bool c2_sth_init = false;

prob g1 = 0.2;
prob g2 = 0.8;

prob p_1_1 = 0.6;
prob p_1_2 = 0.4;

prob p_2_1 = 0.25;
prob p_2_2 = 0.75;

module Client1

	c1 : [0..4] init 0;
	c1s : [0..2] init 0;
	c1_sth : bool init c1_sth_init;
	c1_skip : bool init false;
	c1_flag : bool init false;

	[] serverg & c0_flag & c1=0 -> g1 : (c1'=1) + 1-g1 : (c1'=1) & (c1_skip'=true);
	[] serverg & c0_flag & c1_skip=false & c1=1 -> p_1_1 : (c1_flag'=true)&(c1'=2)&(c1s'=1) +
					 p_1_2 : (c1_flag'=true)&(c1'=2)&(c1s'=2);
	[] serverg & c0_flag & c1_skip=true & c1=1 -> (c1_flag'=true)&(c1'=2);
	[update] c2_flag & !c1_skip & c1=2 & connected_server_has_sth  -> (c1'=3) & (c1_sth'=true);
	[update] c2_flag & c1=2 & ((!c1_skip & !connected_server_has_sth) | c1_skip) -> (c1'=3);
	[round_complete] c1=3 & !clients_all_updated -> (c1'=0) & (c1s'=0) & (c1_skip'=false) & (c1_flag'=false);
	[round_complete] c1=3 & clients_all_updated -> (c1'=4);
	[END] c1=4 -> true;

endmodule

formula connected_server_has_sth = ((c1s=1 & s1_sth) | (c1s=2 & s2_sth));
formula clients_all_updated = c1_sth&c2_sth;
formula serverg = s1_flag & s2_flag;


module Client2=Client1[p_1_1=p_2_1,p_1_2=p_2_2,
g1=g2,
c1=c2,
c1s=c2s,
c1_sth=c2_sth,
c2_sth=c1_sth,
c1_skip=c2_skip,
c1_flag=c2_flag, c0_flag=c1_flag,
c1_sth_init = c2_sth_init] endmodule

const bool sf_init = false;

const int SERVER1 = 1;
const int SERVER2 = 2;

const bool s1_init = true;
const bool s2_init = false;

formula ch1 = (s1_sth?1/5:0) +
(s2_sth?1/5:0);
formula ch2 = (s1_sth?1/5:0)*(s2_sth?1/5:0);

formula get_data = ch1 - ch2;

module Server1

	s1_sth : bool init s1_init;
	s1_flag : bool init sf_init;

	[update] !s1_sth & connected_client_has_sth -> (s1_sth'=true);
	[update] s1_sth | (!s1_sth & !connected_client_has_sth) -> true;
	[spread] !clients_all_updated & !s1_flag & !s1_sth -> get_data : (s1_sth'=true)&(s1_flag'=true) + 1-get_data : (s1_flag'=true);
	[spread] !clients_all_updated & !s1_flag & s1_sth -> (s1_flag'=true);
	[round_complete] true -> (s1_flag'=sf_init);
	[END] true -> true;

endmodule

formula connected_client_has_sth = ((c1s=SERVER1 & c1_sth) | (c2s=SERVER1 & c2_sth));


module Server2=Server1[s1_sth=s2_sth,s2_sth=s1_sth,SERVER1=SERVER2,s1_flag=s2_flag,s1_init=s2_init] endmodule

const double f = 1/2;

formula no_clients_updated = (c1_sth?f:0)+(c2_sth?f:0);

formula client1_getConsistency_STHOnly = c1_skip=false & c1=2 & ((c1s=1 & c1_sth!=s1_sth) | (c1s=2 & c1_sth!=s2_sth));
formula client2_getConsistency_STHOnly = c2_skip=false & c2=2 & ((c2s=1 & c2_sth!=s1_sth) | (c2s=2 & c2_sth!=s2_sth));

formula log_connections_STHOnly = (client1_getConsistency_STHOnly?1:0)+(client2_getConsistency_STHOnly?1:0);

formula client1_getConsistency_STHAndProof = c1_skip=false & c1=2 & ((c1s=1 & c1_sth & !s1_sth) | (c1s=2 & c1_sth & !s2_sth));
formula client2_getConsistency_STHAndProof = c2_skip=false & c2=2 & ((c2s=1 & c2_sth & !s1_sth) | (c2s=2 & c2_sth & !s2_sth));

formula log_connections_STHAndProof = (client1_getConsistency_STHAndProof?1:0)+(client2_getConsistency_STHAndProof?1:0);

rewards "rounds"
	true : 1/4;
endrewards

rewards "log_connections_STHOnly"
	[update] true : log_connections_STHOnly;
endrewards

rewards "log_connections_STHAndProof"
	[update] true : log_connections_STHAndProof;
endrewards

rewards "client_proportion"
	true : no_clients_updated;
endrewards